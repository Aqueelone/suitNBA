package org.forsstudio.nbatestsuit.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PlayerInGameAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlayerInGameAllPropertiesEquals(PlayerInGame expected, PlayerInGame actual) {
        assertPlayerInGameAutoGeneratedPropertiesEquals(expected, actual);
        assertPlayerInGameAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlayerInGameAllUpdatablePropertiesEquals(PlayerInGame expected, PlayerInGame actual) {
        assertPlayerInGameUpdatableFieldsEquals(expected, actual);
        assertPlayerInGameUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlayerInGameAutoGeneratedPropertiesEquals(PlayerInGame expected, PlayerInGame actual) {
        assertThat(expected)
            .as("Verify PlayerInGame auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlayerInGameUpdatableFieldsEquals(PlayerInGame expected, PlayerInGame actual) {
        assertThat(expected)
            .as("Verify PlayerInGame relevant properties")
            .satisfies(e -> assertThat(e.getPoints()).as("check points").isEqualTo(actual.getPoints()))
            .satisfies(e -> assertThat(e.getRebounds()).as("check rebounds").isEqualTo(actual.getRebounds()))
            .satisfies(e -> assertThat(e.getAssists()).as("check assists").isEqualTo(actual.getAssists()))
            .satisfies(e -> assertThat(e.getSteals()).as("check steals").isEqualTo(actual.getSteals()))
            .satisfies(e -> assertThat(e.getBlocks()).as("check blocks").isEqualTo(actual.getBlocks()))
            .satisfies(e -> assertThat(e.getFouls()).as("check fouls").isEqualTo(actual.getFouls()))
            .satisfies(e -> assertThat(e.getTurnovers()).as("check turnovers").isEqualTo(actual.getTurnovers()))
            .satisfies(e -> assertThat(e.getPlayed()).as("check played").isEqualTo(actual.getPlayed()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlayerInGameUpdatableRelationshipsEquals(PlayerInGame expected, PlayerInGame actual) {
        assertThat(expected)
            .as("Verify PlayerInGame relationships")
            .satisfies(e -> assertThat(e.getTeam()).as("check team").isEqualTo(actual.getTeam()))
            .satisfies(e -> assertThat(e.getPlayer()).as("check player").isEqualTo(actual.getPlayer()))
            .satisfies(e -> assertThat(e.getGame()).as("check game").isEqualTo(actual.getGame()));
    }
}
