package org.forsstudio.nbatestsuit.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TeamInGameAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeamInGameAllPropertiesEquals(TeamInGame expected, TeamInGame actual) {
        assertTeamInGameAutoGeneratedPropertiesEquals(expected, actual);
        assertTeamInGameAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeamInGameAllUpdatablePropertiesEquals(TeamInGame expected, TeamInGame actual) {
        assertTeamInGameUpdatableFieldsEquals(expected, actual);
        assertTeamInGameUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeamInGameAutoGeneratedPropertiesEquals(TeamInGame expected, TeamInGame actual) {
        assertThat(expected)
            .as("Verify TeamInGame auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeamInGameUpdatableFieldsEquals(TeamInGame expected, TeamInGame actual) {}

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeamInGameUpdatableRelationshipsEquals(TeamInGame expected, TeamInGame actual) {
        assertThat(expected)
            .as("Verify TeamInGame relationships")
            .satisfies(e -> assertThat(e.getTeam()).as("check team").isEqualTo(actual.getTeam()))
            .satisfies(e -> assertThat(e.getGame()).as("check game").isEqualTo(actual.getGame()));
    }
}
