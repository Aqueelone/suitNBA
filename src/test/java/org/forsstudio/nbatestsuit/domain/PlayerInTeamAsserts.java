package org.forsstudio.nbatestsuit.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PlayerInTeamAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlayerInTeamAllPropertiesEquals(PlayerInTeam expected, PlayerInTeam actual) {
        assertPlayerInTeamAutoGeneratedPropertiesEquals(expected, actual);
        assertPlayerInTeamAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlayerInTeamAllUpdatablePropertiesEquals(PlayerInTeam expected, PlayerInTeam actual) {
        assertPlayerInTeamUpdatableFieldsEquals(expected, actual);
        assertPlayerInTeamUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlayerInTeamAutoGeneratedPropertiesEquals(PlayerInTeam expected, PlayerInTeam actual) {
        assertThat(expected)
            .as("Verify PlayerInTeam auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlayerInTeamUpdatableFieldsEquals(PlayerInTeam expected, PlayerInTeam actual) {}

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlayerInTeamUpdatableRelationshipsEquals(PlayerInTeam expected, PlayerInTeam actual) {
        assertThat(expected)
            .as("Verify PlayerInTeam relationships")
            .satisfies(e -> assertThat(e.getPlayer()).as("check player").isEqualTo(actual.getPlayer()))
            .satisfies(e -> assertThat(e.getTeamInSeason()).as("check teamInSeason").isEqualTo(actual.getTeamInSeason()));
    }
}
